"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""
import os
import json
import uuid
import hashlib
from datetime import datetime
from typing import Dict, Any, List, Optional

class FileManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–∞–π–ª–æ–≤"""
    
    @staticmethod
    def save_uploaded_file(file, upload_dir: str) -> Dict[str, Any]:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_extension = os.path.splitext(file.filename)[1]
        unique_filename = f"{uuid.uuid4().hex}{file_extension}"
        file_path = os.path.join(upload_dir, unique_filename)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(upload_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file.save(file_path)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = {
            "filename": unique_filename,
            "original_filename": file.filename,
            "type": file.content_type,
            "size": os.path.getsize(file_path),
            "uploaded_at": datetime.now().isoformat(),
            "path": file_path
        }
        
        return file_info
    
    @staticmethod
    def delete_file(file_path: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                return True
            return False
        except Exception:
            return False
    
    @staticmethod
    def get_file_hash(file_path: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'rb') as f:
                file_hash = hashlib.md5(f.read()).hexdigest()
            return file_hash
        except Exception:
            return None

class DataManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö JSON"""
    
    @staticmethod
    def load_json(file_path: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception:
            return {}
    
    @staticmethod
    def save_json(data: Dict[str, Any], file_path: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            return True
        except Exception:
            return False
    
    @staticmethod
    def backup_json(file_path: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ JSON —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(file_path):
                backup_path = f"{file_path}.backup.{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                with open(file_path, 'r', encoding='utf-8') as source:
                    with open(backup_path, 'w', encoding='utf-8') as backup:
                        backup.write(source.read())
                return True
            return False
        except Exception:
            return False

class TimeHelper:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º"""
    
    @staticmethod
    def format_datetime(dt: datetime, format_str: str = '%d.%m.%Y %H:%M') -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        return dt.strftime(format_str)
    
    @staticmethod
    def parse_time(time_str: str) -> Optional[tuple[int, int]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ HH:MM"""
        try:
            parts = time_str.split(':')
            if len(parts) == 2:
                hour = int(parts[0])
                minute = int(parts[1])
                
                if 0 <= hour <= 23 and 0 <= minute <= 59:
                    return hour, minute
            return None
        except Exception:
            return None
    
    @staticmethod
    def get_weekday_name(weekday: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        days = {
            1: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            2: '–í—Ç–æ—Ä–Ω–∏–∫', 
            3: '–°—Ä–µ–¥–∞',
            4: '–ß–µ—Ç–≤–µ—Ä–≥',
            5: '–ü—è—Ç–Ω–∏—Ü–∞',
            6: '–°—É–±–±–æ—Ç–∞',
            7: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }
        return days.get(weekday, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

class SecurityHelper:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    HTML_FORMAT_WARNING = """‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram:

üìå –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–≥–∏:
‚Ä¢ <b>–∂–∏—Ä–Ω—ã–π</b> –∏–ª–∏ <strong>–∂–∏—Ä–Ω—ã–π</strong>
‚Ä¢ <i>–∫—É—Ä—Å–∏–≤</i> –∏–ª–∏ <em>–∫—É—Ä—Å–∏–≤</em>
‚Ä¢ <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u> –∏–ª–∏ <ins>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</ins>
‚Ä¢ <s>–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s>, <strike>–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</strike> –∏–ª–∏ <del>–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</del>
‚Ä¢ <span class="tg-spoiler">—Å–ø–æ–π–ª–µ—Ä</span> –∏–ª–∏ <tg-spoiler>—Å–ø–æ–π–ª–µ—Ä</tg-spoiler>
‚Ä¢ <code>–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</code>
‚Ä¢ <pre>–±–ª–æ–∫ –∫–æ–¥–∞</pre>

üì± –ü—Ä–∏–º–µ—Ä –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤:
<b>–∂–∏—Ä–Ω—ã–π <i>–∂–∏—Ä–Ω—ã–π –∫—É—Ä—Å–∏–≤ <s>–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π –∂–∏—Ä–Ω—ã–π –∫—É—Ä—Å–∏–≤</s></i></b>

üîó –°—Å—ã–ª–∫–∏:
<a href="http://example.com/">—Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏</a>

‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML —Ç–µ–≥–æ–≤ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!"""

    @staticmethod
    def sanitize_filename(filename: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –£–¥–∞–ª—è–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        safe_chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789._-"
        sanitized = ''.join(c for c in filename if c in safe_chars)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(sanitized) > 100:
            name, ext = os.path.splitext(sanitized)
            sanitized = name[:90] + ext
        
        return sanitized or 'unnamed_file'
    
    @staticmethod
    def validate_admin_id(user_id: int, admin_ids: List[int]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in admin_ids
    
    @staticmethod
    def escape_html(text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤"""
        if not text:
            return ""
        
        escape_chars = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#x27;'
        }
        
        for char, escape in escape_chars.items():
            text = text.replace(char, escape)
        
        return text

class LogHelper:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    @staticmethod
    def setup_logger(name: str, log_file: str, level: str = 'INFO') -> Any:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞"""
        import logging
        
        logger = logging.getLogger(name)
        logger.setLevel(getattr(logging, level.upper()))
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        os.makedirs(os.path.dirname(log_file), exist_ok=True)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–∞
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Å–æ–ª–∏
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)
        
        return logger
