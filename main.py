import asyncio
import os
from datetime import datetime
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å loguru
from loguru import logger
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ loguru
logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
logger.add(
    sys.stderr,
    level="DEBUG",
    format="<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
    colorize=True
)
logger.add(
    "logs/bot_{time:YYYY-MM-DD}.log",
    level="DEBUG",
    format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}",
    rotation="1 day",
    retention="30 days",
    compression="zip"
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    import requests
    logger.info("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ requests –Ω–∞–π–¥–µ–Ω–∞")
except ImportError:
    logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: pip install requests")

from config import Config
from bot.telegram_bot import TelegramBot
from bot.campaign_scheduler import CampaignScheduler
from web.app import create_app
from utils.ngrok_manager import NgrokManager  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º NgrokManager
from utils.time_helper import get_future_utc_time_str  # –í—ã–Ω–µ—Å –∏–º–ø–æ—Ä—Ç –Ω–∞–≤–µ—Ä—Ö

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
os.makedirs("data", exist_ok=True)
os.makedirs("logs", exist_ok=True)
os.makedirs("uploads", exist_ok=True)

logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()
logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

def format_ngrok_message(ngrok_url: str, restart_time_str: str) -> str:
    return (
        f"üîÑ <b>Ngrok —Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
        f"üîó –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {ngrok_url}\n"
        f"‚è±Ô∏è –°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ <b>{restart_time_str}</b>"
    )

async def notify_admins(bot: TelegramBot, admin_ids: list, ngrok_url: Optional[str], config: Config):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ —Å–º–µ–Ω–µ —Å—Å—ã–ª–∫–∏."""
    restart_time_str = get_future_utc_time_str(hours=config.NGROK_RESTART_INTERVAL)
    for admin_id in admin_ids:
        try:
            await bot.bot.send_message(
                admin_id,
                format_ngrok_message(ngrok_url, restart_time_str)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def graceful_shutdown(bot: TelegramBot, scheduler: CampaignScheduler, ngrok_manager: Optional[NgrokManager]):
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    if ngrok_manager and getattr(ngrok_manager, 'is_running', False):
        logger.debug("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Ngrok")
        ngrok_manager.stop()
    await scheduler.stop()
    await bot.stop()
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

async def main() -> None:
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞")
    telegram_bot: Optional[TelegramBot] = None
    scheduler: Optional[CampaignScheduler] = None
    ngrok_manager: Optional[NgrokManager] = None
    ngrok_url: Optional[str] = None
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞")
        telegram_bot = TelegramBot(config)
        await telegram_bot.setup()
        logger.info("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π")
        scheduler = CampaignScheduler(telegram_bot, config)
        await scheduler.start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–∞–º–ø–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        logger.debug("–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞")
        app = create_app(telegram_bot, scheduler, config)
        logger.info("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ngrok –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ngrok –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        ngrok_manager = NgrokManager(config)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ NgrokManager –≤ TelegramBot —Å—Ä–∞–∑—É
        telegram_bot.ngrok_manager = ngrok_manager
        
        if config.NGROK_ENABLED:
            if ngrok_manager.start():
                # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—É—á–∏—Ç—å URL —Å –ø–∞—É–∑–∞–º–∏
                for attempt in range(3):
                    ngrok_url = ngrok_manager.get_public_url()
                    if ngrok_url:
                        logger.info(f"‚úÖ Ngrok –∑–∞–ø—É—â–µ–Ω: {ngrok_url}")
                        # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º ngrok_manager –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
                        logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—É—Å–∫–µ")
                        await telegram_bot.notify_admin_startup(
                            host=config.WEB_HOST,
                            port=config.WEB_PORT,
                            ngrok_url=ngrok_url,
                            ngrok_manager=ngrok_manager  # –ü–µ—Ä–µ–¥–∞—ë–º NgrokManager –≤ –º–µ—Ç–æ–¥
                        )
                        logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        break
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Ngrok URL (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/3)")
                        await asyncio.sleep(5)
                
                if not ngrok_url:
                    logger.error("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Ngrok URL –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
            else:
                logger.error("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Ngrok")
        
        logger.info("üéØ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        while True:
            await asyncio.sleep(60)
            logger.debug("Heartbeat - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –ª–∏ URL Ngrok
            if ngrok_manager and getattr(ngrok_manager, 'is_running', False):
                current_url = ngrok_manager.get_public_url()
                if current_url and current_url != ngrok_url:
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π Ngrok URL: {current_url}")
                    ngrok_url = current_url
                    await notify_admins(telegram_bot, config.ADMIN_IDS, ngrok_url, config)
    except (KeyboardInterrupt, SystemExit):
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")
        if telegram_bot and scheduler:
            await graceful_shutdown(telegram_bot, scheduler, ngrok_manager)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
        if telegram_bot and scheduler:
            await graceful_shutdown(telegram_bot, scheduler, ngrok_manager)
        raise

if __name__ == "__main__":
    try:
        logger.info("üåü –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è TG AutoPosting")
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
