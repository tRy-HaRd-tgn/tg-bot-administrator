import os
from datetime import timedelta

from loguru import logger
from flask import Flask, render_template, redirect, url_for, session, request, flash, jsonify
from flask_login import LoginManager, login_required, login_user, logout_user, current_user
from werkzeug.utils import secure_filename

from web.models.user import User
from web.routes.api import api_bp
from web.routes.views import views_bp
from web.utils.auth import AuthManager

def create_app(bot, scheduler, config):
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    
    app = Flask(__name__, 
                static_folder='static', 
                template_folder='templates')
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.config['SECRET_KEY'] = config.SECRET_KEY
    app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(seconds=config.SESSION_LIFETIME)
    app.config['UPLOAD_FOLDER'] = config.UPLOADS_DIR
    app.config['MAX_CONTENT_LENGTH'] = 20 * 1024 * 1024  # 20MB –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    
    logger.debug(f"Flask config: SECRET_KEY={'***' if config.SECRET_KEY else 'NOT SET'}")
    logger.debug(f"Upload folder: {config.UPLOADS_DIR}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    auth_manager = AuthManager(config)
    login_manager = LoginManager()
    login_manager.init_app(app)
    login_manager.login_view = "views.login"
    
    @login_manager.user_loader
    def load_user(user_id):
        logger.debug(f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        return auth_manager.get_user_by_id(user_id)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è blueprints
    app.register_blueprint(api_bp, url_prefix='/api')
    app.register_blueprint(views_bp, url_prefix='/')
    logger.debug("Blueprints –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –î–µ–ª–∞–µ–º –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.bot = bot
    app.scheduler = scheduler
    app.config_obj = config
    app.auth_manager = auth_manager
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    @app.errorhandler(404)
    def page_not_found(e):
        logger.warning(f"404 –æ—à–∏–±–∫–∞: {request.url}")
        return render_template('error.html', 
                              error_code=404, 
                              error_message="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"), 404
    
    @app.errorhandler(500)
    def internal_server_error(e):
        logger.error(f"500 –æ—à–∏–±–∫–∞: {e}")
        return render_template('error.html', 
                              error_code=500, 
                              error_message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"), 500
    
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    from threading import Thread
    def run_server():
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {config.WEB_HOST}:{config.WEB_PORT}")
        app.run(host=config.WEB_HOST, port=config.WEB_PORT, debug=False, use_reloader=False)
    
    Thread(target=run_server, daemon=True).start()
    logger.info("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    
    return app
