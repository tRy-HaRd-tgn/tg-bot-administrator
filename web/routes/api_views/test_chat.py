import json
from datetime import datetime
import requests
from flask import jsonify, current_app
from flask_login import login_required, current_user
from loguru import logger

def test_chat(chat_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
    try:
        config = current_app.config_obj
        with open(config.CHATS_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            chats = data.get('chats', [])
        chat_data = None
        for chat in chats:
            if chat.get('id') == chat_id:
                chat_data = chat
                break
        if not chat_data:
            return jsonify({"error": "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        telegram_chat_id = chat_data.get('chat_id')
        token = config.BOT_TOKEN
        test_message = f"üîÑ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
        test_message += f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>\n"
        test_message += f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_data.get('title')}\n"
        test_message += f"‚Ä¢ –¢–∏–ø: {chat_data.get('type')}\n"
        test_message += f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat_data.get('member_count') or '?'}\n"
        test_message += f"‚Ä¢ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {chat_data.get('bot_status')}\n\n"
        test_message += f"‚úÖ <i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {current_user.username}</i>\n"
        test_message += f"‚è± <i>{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"
        api_url = f"https://api.telegram.org/bot{token}/sendMessage"
        payload = {
            'chat_id': telegram_chat_id,
            'text': test_message,
            'parse_mode': 'HTML'
        }
        response = requests.post(api_url, json=payload)
        data = response.json()
        if data.get('ok'):
            message_id = data.get('result', {}).get('message_id')
            return jsonify({
                "success": True,
                "message": f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç '{chat_data.get('title')}'",
                "message_id": message_id
            })
        else:
            error_description = data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            return jsonify({
                "success": False,
                "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {error_description}",
                "error_code": data.get('error_code')
            }), 400
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "detail": str(e)}), 500 