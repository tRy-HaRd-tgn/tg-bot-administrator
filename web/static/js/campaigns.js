/**
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π JavaScript –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏—è–º–∏
 */
class CampaignsManager {
    constructor() {
        this.campaigns = [];
        this.filteredCampaigns = [];
        this.currentFilter = 'all';
        this.searchQuery = '';
        this.utcTimeInterval = null;
        this.init();
    }

    async init() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CampaignsManager...');
        this.bindEvents();
        await this.loadCampaigns();
        this.startUTCClock();
    }

    bindEvents() {
        // –ü–æ–∏—Å–∫
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => this.handleSearch(e.target.value));
        }

        // –§–∏–ª—å—Ç—Ä—ã
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', () => this.setFilter(btn.dataset.filter));
        });
    }

    async loadCampaigns() {
        try {
            Utils.showLoading(true, '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π...');
            
            const response = await fetch('/api/campaigns', {
                credentials: 'same-origin'
            });

            if (!response.ok) {
                throw new Error(`HTTP error: ${response.status}`);
            }

            const campaigns = await response.json();
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏:', campaigns);
            
            if (!Array.isArray(campaigns)) {
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
            }

            this.campaigns = campaigns;
            this.filterCampaigns();
            this.updateStatistics();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–º–ø–∞–Ω–∏–π:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π: ' + error.message);
        } finally {
            Utils.showLoading(false);
        }
    }

    filterCampaigns() {
        let filtered = this.campaigns;

        // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if (this.currentFilter !== 'all') {
            filtered = filtered.filter(campaign => campaign.status === this.currentFilter);
        }

        // –ü–æ–∏—Å–∫
        if (this.searchQuery) {
            const query = this.searchQuery.toLowerCase();
            filtered = filtered.filter(campaign => 
                campaign.name.toLowerCase().includes(query) ||
                campaign.message_text.toLowerCase().includes(query) ||
                campaign.description?.toLowerCase().includes(query)
            );
        }

        this.filteredCampaigns = filtered;
        this.renderCampaigns();
    }

    renderCampaigns() {
        const container = document.getElementById('campaignsGrid');
        if (!container) return;

        if (this.filteredCampaigns.length === 0) {
            this.showEmptyState();
            return;
        }

        container.innerHTML = this.filteredCampaigns.map(campaign => 
            this.createCampaignCard(campaign)
        ).join('');
        
        this.bindCampaignEvents();
    }

    createCampaignCard(campaign) {
        const statusConfig = this.getStatusConfig(campaign.status);
        const createdDate = new Date(campaign.created_at).toLocaleDateString('ru-RU');
        const lastRun = campaign.last_run ? 
            new Date(campaign.last_run).toLocaleDateString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞';
        
        const chatsCount = campaign.chats?.length || 0;
        const buttonsCount = campaign.buttons?.length || 0;
        const mediaCount = campaign.media_files?.length || 0;
        
        return `
            <div class="campaign-card status-${campaign.status}" data-campaign-id="${campaign.id}">
                <div class="campaign-header">
                    <div class="campaign-title-section">
                        <h6 class="campaign-title">${Utils.escapeHtml(campaign.name)}</h6>
                        <span class="campaign-status ${campaign.status}">${statusConfig.text}</span>
                    </div>
                </div>
                
                <div class="campaign-body">
                    <div class="campaign-info">
                        <div class="campaign-detail">
                            <i class="fa-solid fa-calendar-days"></i>
                            <strong>–ü–µ—Ä–∏–æ–¥:</strong> ${campaign.start_date} ‚Äî ${campaign.end_date}
                        </div>
                        <div class="campaign-detail">
                            <i class="fa-solid fa-clock"></i>
                            <strong>–í—Ä–µ–º—è:</strong> ${campaign.post_time}
                        </div>
                        <div class="campaign-detail">
                            <i class="fa-solid fa-comments"></i>
                            <strong>–ß–∞—Ç–æ–≤:</strong> ${chatsCount}
                        </div>
                        <div class="campaign-detail">
                            <i class="fa-solid fa-play"></i>
                            <strong>–ó–∞–ø—É—Å–∫–æ–≤:</strong> ${campaign.run_count || 0}
                        </div>
                        <div class="campaign-detail">
                            <i class="fa-solid fa-calendar-check"></i>
                            <strong>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫:</strong> ${lastRun}
                        </div>
                    </div>
                    
                    <div class="campaign-message">
                        <div class="campaign-message-text">
                            ${Utils.escapeHtml(campaign.message_text)}
                        </div>
                    </div>
                    
                    <div class="campaign-meta">
                        ${mediaCount > 0 ? `<span class="campaign-badge media">üìÅ ${mediaCount} —Ñ–∞–π–ª–æ–≤</span>` : ''}
                        ${buttonsCount > 0 ? `<span class="campaign-badge buttons">üîò ${buttonsCount} –∫–Ω–æ–ø–æ–∫</span>` : ''}
                        ${campaign.repeat_enabled ? '<span class="campaign-badge repeat">üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</span>' : ''}
                        ${campaign.pin_message ? '<span class="campaign-badge pin">üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ</span>' : ''}
                    </div>
                </div>
                
                <div class="campaign-footer">
                    <div class="campaign-actions">
                        <button class="campaign-action-btn view" onclick="campaignsManager.viewCampaign('${campaign.id}')" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                            <i class="fa-solid fa-eye"></i>
                        </button>
                        <button class="campaign-action-btn toggle" onclick="campaignsManager.toggleCampaignStatus('${campaign.id}')" 
                                title="${this.getStatusActionTitle(campaign.status)}">
                            <i class="fa-solid ${this.getStatusIcon(campaign.status)}"></i>
                        </button>
                        ${campaign.status !== 'completed' ? `
                            <button class="campaign-action-btn complete" onclick="campaignsManager.completeCampaign('${campaign.id}')" title="–ó–∞–≤–µ—Ä—à–∏—Ç—å">
                                <i class="fa-solid fa-check-circle"></i>
                            </button>
                        ` : ''}
                        <button class="campaign-action-btn delete" onclick="campaignsManager.deleteCampaign('${campaign.id}')" title="–£–¥–∞–ª–∏—Ç—å">
                            <i class="fa-solid fa-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    getStatusActionTitle(status) {
        switch (status) {
            case 'active': return '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å';
            case 'paused': return '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å';
            case 'completed': return '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å';
            default: return '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å';
        }
    }

    getStatusIcon(status) {
        switch (status) {
            case 'active': return 'fa-pause';
            case 'paused': return 'fa-play';
            case 'completed': return 'fa-rotate';
            default: return 'fa-play';
        }
    }

    bindCampaignEvents() {
        // –°–æ–±—ã—Ç–∏—è —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã —á–µ—Ä–µ–∑ onclick –≤ HTML
    }

    getStatusConfig(status) {
        const configs = {
            active: { text: '–ê–∫—Ç–∏–≤–Ω–∞', class: 'success' },
            paused: { text: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', class: 'warning' },
            draft: { text: '–ß–µ—Ä–Ω–æ–≤–∏–∫', class: 'secondary' },
            completed: { text: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞', class: 'info' }
        };
        return configs[status] || { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', class: 'secondary' };
    }

    updateStatistics() {
        const stats = {
            all: this.campaigns.length,
            active: this.campaigns.filter(c => c.status === 'active').length,
            paused: this.campaigns.filter(c => c.status === 'paused').length,
            draft: this.campaigns.filter(c => c.status === 'draft').length,
            completed: this.campaigns.filter(c => c.status === 'completed').length
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
        Object.keys(stats).forEach(key => {
            const element = document.getElementById(`${key}Count`);
            if (element) {
                element.textContent = stats[key];
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const campaignsCount = document.getElementById('campaignsCount');
        if (campaignsCount) {
            campaignsCount.textContent = `–í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π: ${stats.all}`;
        }
    }

    setFilter(filter) {
        this.currentFilter = filter;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.filter === filter);
        });
        
        this.filterCampaigns();
    }

    handleSearch(query) {
        this.searchQuery = query.trim();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
        const clearBtn = document.querySelector('.search-clear');
        if (clearBtn) {
            clearBtn.style.display = this.searchQuery ? 'block' : 'none';
        }
        
        this.filterCampaigns();
    }

    clearSearch() {
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.value = '';
        }
        this.handleSearch('');
    }

    showEmptyState() {
        const container = document.getElementById('campaignsGrid');
        if (!container) return;

        const message = this.searchQuery || this.currentFilter !== 'all' 
            ? '–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' 
            : '–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π';

        container.innerHTML = `
            <div class="content-state">
                <div class="state-icon">
                    <i class="fa-solid fa-rocket"></i>
                </div>
                <h5>–ö–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h5>
                <p>${message}</p>
                ${!this.searchQuery && this.currentFilter === 'all' ? `
                    <a href="/campaigns/new" class="btn btn-primary">
                        <i class="fa-solid fa-plus me-2"></i>–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é
                    </a>
                ` : `
                    <button class="btn btn-outline-primary" onclick="campaignsManager.clearFilters()">
                        <i class="fa-solid fa-filter-circle-xmark me-2"></i>–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                    </button>
                `}
            </div>
        `;
    }

    showError(message) {
        const container = document.getElementById('campaignsGrid');
        if (!container) return;

        container.innerHTML = `
            <div class="content-state">
                <div class="state-icon error">
                    <i class="fa-solid fa-exclamation-triangle"></i>
                </div>
                <h5>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h5>
                <p>${message}</p>
                <button class="btn btn-primary" onclick="campaignsManager.loadCampaigns()">
                    <i class="fa-solid fa-refresh me-2"></i>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                </button>
            </div>
        `;
    }

    clearFilters() {
        this.setFilter('all');
        this.clearSearch();
    }

    async viewCampaign(campaignId) {
        const campaign = this.campaigns.find(c => c.id === campaignId);
        if (!campaign) return;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
        this.showCampaignDetails(campaign);
    }

    showCampaignDetails(campaign) {
        const modal = document.getElementById('campaignDetailModal');
        const content = document.getElementById('campaignDetailContent');
        
        if (!modal || !content) return;

        const statusConfig = this.getStatusConfig(campaign.status);
        const chatsCount = campaign.chats?.length || 0;
        const buttonsCount = campaign.buttons?.length || 0;
        const mediaCount = campaign.media_files?.length || 0;

        content.innerHTML = `
            <div class="campaign-details">
                <div class="detail-section">
                    <h6>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h6>
                    <div class="detail-grid">
                        <div class="detail-item">
                            <strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${Utils.escapeHtml(campaign.name)}
                        </div>
                        <div class="detail-item">
                            <strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="badge bg-${statusConfig.class}">${statusConfig.text}</span>
                        </div>
                        <div class="detail-item">
                            <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${Utils.escapeHtml(campaign.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
                        </div>
                    </div>
                </div>

                <div class="detail-section">
                    <h6>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</h6>
                    <div class="detail-grid">
                        <div class="detail-item">
                            <strong>–ü–µ—Ä–∏–æ–¥:</strong> ${campaign.start_date} ‚Äî ${campaign.end_date}
                        </div>
                        <div class="detail-item">
                            <strong>–í—Ä–µ–º—è:</strong> ${campaign.post_time}
                        </div>
                        <div class="detail-item">
                            <strong>–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ:</strong> ${campaign.repeat_enabled ? '–í–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
                        </div>
                        ${campaign.days_of_week ? `
                            <div class="detail-item">
                                <strong>–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:</strong> ${campaign.days_of_week}
                            </div>
                        ` : ''}
                    </div>
                </div>

                <div class="detail-section">
                    <h6>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ</h6>
                    <div class="detail-item">
                        <strong>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</strong>
                        <div class="message-preview">${Utils.escapeHtml(campaign.message_text)}</div>
                    </div>
                    <div class="detail-grid">
                        <div class="detail-item">
                            <strong>–ß–∞—Ç–æ–≤:</strong> ${chatsCount}
                        </div>
                        <div class="detail-item">
                            <strong>–ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤:</strong> ${mediaCount}
                        </div>
                        <div class="detail-item">
                            <strong>–ö–Ω–æ–ø–æ–∫:</strong> ${buttonsCount}
                        </div>
                    </div>
                </div>

                <div class="detail-section">
                    <h6>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h6>
                    <div class="detail-grid">
                        <div class="detail-item">
                            <strong>–ó–∞–ø—É—Å–∫–æ–≤:</strong> ${campaign.run_count || 0}
                        </div>
                        <div class="detail-item">
                            <strong>–°–æ–∑–¥–∞–Ω–∞:</strong> ${new Date(campaign.created_at).toLocaleString('ru-RU')}
                        </div>
                        <div class="detail-item">
                            <strong>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫:</strong> ${campaign.last_run ? new Date(campaign.last_run).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞'}
                        </div>
                    </div>
                </div>
            </div>
        `;

        new bootstrap.Modal(modal).show();
    }

    editCampaign(campaignId) {
        window.location.href = `/campaigns/${campaignId}/edit`;
    }

    async toggleCampaignStatus(campaignId) {
        try {
            const campaign = this.campaigns.find(c => c.id === campaignId);
            if (!campaign) return;

            const action = campaign.status === 'completed' ? 'restart' : 
                         (campaign.status === 'active' ? 'pause' : 'activate');

            const response = await fetch(`/api/campaigns/${campaignId}/toggle-status`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ action })
            });

            const result = await response.json();

            if (response.ok && result.success) {
                Utils.showNotification('success', '–£—Å–ø–µ—Ö', result.message);
                await this.loadCampaigns();
            } else {
                throw new Error(result.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            Utils.showNotification('error', '–û—à–∏–±–∫–∞', error.message);
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    async completeCampaign(campaignId) {
        try {
            const response = await fetch(`/api/campaigns/${campaignId}/complete`, {
                method: 'POST'
            });

            const result = await response.json();

            if (response.ok && result.success) {
                Utils.showNotification('success', '–£—Å–ø–µ—Ö', '–ö–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                await this.loadCampaigns();
            } else {
                throw new Error(result.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            Utils.showNotification('error', '–û—à–∏–±–∫–∞', error.message);
        }
    }

    deleteCampaign(campaignId, campaignName) {
        const modal = document.getElementById('deleteConfirmModal');
        const nameElement = document.getElementById('deleteCampaignName');
        const confirmBtn = document.getElementById('confirmDeleteBtn');
        
        if (!modal || !nameElement || !confirmBtn) return;

        nameElement.textContent = campaignName;
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        const newConfirmBtn = confirmBtn.cloneNode(true);
        confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);
        
        newConfirmBtn.addEventListener('click', async () => {
            try {
                Utils.showLoading(true, '–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏...');

                const response = await fetch(`/api/campaigns/${campaignId}`, {
                    method: 'DELETE',
                    credentials: 'same-origin'
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    Utils.showNotification('success', '–£—Å–ø–µ—Ö', result.message);
                    bootstrap.Modal.getInstance(modal).hide();
                    await this.loadCampaigns();
                } else {
                    throw new Error(result.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é');
                }

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
                Utils.showNotification('error', '–û—à–∏–±–∫–∞', error.message);
            } finally {
                Utils.showLoading(false);
            }
        });

        new bootstrap.Modal(modal).show();
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è UTC –≤—Ä–µ–º–µ–Ω–∏
    startUTCClock() {
        this.updateUTCTime();
        this.utcTimeInterval = setInterval(() => {
            this.updateUTCTime();
        }, 1000);
    }

    // –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ UTC –≤—Ä–µ–º–µ–Ω–∏
    updateUTCTime() {
        const now = new Date();
        const utcTime = now.toLocaleTimeString('ru-RU', { 
            timeZone: 'UTC',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });

        const utcDate = now.toLocaleDateString('ru-RU', {
            timeZone: 'UTC',
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å UTC –≤—Ä–µ–º–µ–Ω–µ–º
        const utcElements = document.querySelectorAll('.utc-time');
        utcElements.forEach(el => {
            el.textContent = `${utcDate}, ${utcTime}`;
        });
    }

    // –î–æ–ø–æ–ª–Ω—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º UTC
    formatSchedule(campaign) {
        const startDate = new Date(campaign.start_date).toLocaleString('ru-RU', { timeZone: 'UTC' });
        const endDate = new Date(campaign.end_date).toLocaleString('ru-RU', { timeZone: 'UTC' });
        const postTime = new Date(`1970-01-01T${campaign.post_time}Z`).toLocaleString('ru-RU', { timeZone: 'UTC' });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É UTC –∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        return `${startDate} - ${endDate} –≤ ${postTime} UTC`;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const campaignsManager = new CampaignsManager();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CampaignsManager');
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.campaignsManager = campaignsManager;

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.campaignsManager = campaignsManager;

