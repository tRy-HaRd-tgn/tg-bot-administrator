import asyncio
import json
import os
from datetime import datetime, timedelta, timezone
import uuid
from typing import Dict, List, Optional, Any, Set, Union

from loguru import logger
from aiogram.types import InputMediaPhoto, InputMediaVideo, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.exceptions import TelegramAPIError

class CampaignScheduler:
    def __init__(self, telegram_bot, config):
        logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CampaignScheduler")
        self.bot = telegram_bot
        self.config = config
        self.campaigns = {}
        self.running = False
        self.tasks = set()
        self.next_run_times = {}
        logger.info("CampaignScheduler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–∞–º–ø–∞–Ω–∏–π"""
        logger.debug("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π")
        self.running = True
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞
        await self.load_campaigns()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        task = asyncio.create_task(self._schedule_checker())
        self.tasks.add(task)
        
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–∞–º–ø–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–∞–º–ø–∞–Ω–∏–π"""
        logger.debug("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π")
        self.running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task in self.tasks:
            task.cancel()
        
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–∞–º–ø–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def load_campaigns(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        logger.debug(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞: {self.config.CAMPAIGNS_FILE}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data
            data_dir = os.path.dirname(self.config.CAMPAIGNS_FILE)
            if not os.path.exists(data_dir):
                logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {data_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...")
                os.makedirs(data_dir, exist_ok=True)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if os.path.exists(self.config.CAMPAIGNS_FILE):
                try:
                    with open(self.config.CAMPAIGNS_FILE, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        if not isinstance(data, dict):
                            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON - –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç")
                        
                        campaigns = data.get('campaigns', [])
                        if not isinstance(campaigns, list):
                            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç campaigns - –æ–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤")
                        
                        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
                        self.campaigns.clear()
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–º–ø–∞–Ω–∏–∏ –≤ –ø–∞–º—è—Ç—å
                        for campaign in campaigns:
                            if not isinstance(campaign, dict) or 'id' not in campaign:
                                logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è: {campaign}")
                                continue
                                
                            self.campaigns[campaign['id']] = campaign
                            logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–∞–º–ø–∞–Ω–∏—è: {campaign['id']} - {campaign.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.campaigns)} –∫–∞–º–ø–∞–Ω–∏–π –∏–∑ JSON")
                
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    backup_path = f"{self.config.CAMPAIGNS_FILE}.backup.{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                    os.rename(self.config.CAMPAIGNS_FILE, backup_path)
                    logger.info(f"üìë –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {backup_path}")
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                    self._create_empty_campaigns_file()
                
                except ValueError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                    self._create_empty_campaigns_file()
                
            else:
                logger.info("üìÑ –§–∞–π–ª –∫–∞–º–ø–∞–Ω–∏–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")
                self._create_empty_campaigns_file()
            
        except PermissionError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: {e}")
            raise RuntimeError(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –∫–∞–º–ø–∞–Ω–∏–π: {self.config.CAMPAIGNS_FILE}")
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–º–ø–∞–Ω–∏–π: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏: {e}")

    def _create_empty_campaigns_file(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –∫–∞–º–ø–∞–Ω–∏–π"""
        try:
            with open(self.config.CAMPAIGNS_FILE, 'w', encoding='utf-8') as f:
                json.dump({"campaigns": []}, f, ensure_ascii=False, indent=2)
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –∫–∞–º–ø–∞–Ω–∏–π")
            self.campaigns.clear()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–∞–º–ø–∞–Ω–∏–π: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∫–∞–º–ø–∞–Ω–∏–π: {e}")
    
    async def save_campaigns(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –≤ JSON —Ñ–∞–π–ª"""
        logger.debug("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–π –≤ JSON —Ñ–∞–π–ª")
        
        try:
            campaigns_list = list(self.campaigns.values())
            with open(self.config.CAMPAIGNS_FILE, 'w', encoding='utf-8') as f:
                json.dump({"campaigns": campaigns_list}, f, ensure_ascii=False, indent=2)
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(campaigns_list)} –∫–∞–º–ø–∞–Ω–∏–π –≤ JSON")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–π: {e}")
    
    async def add_campaign(self, campaign_data: Dict) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏
        campaign_id = str(uuid.uuid4())
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ —Å ID: {campaign_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
        campaign_data["id"] = campaign_id
        campaign_data["created_at"] = datetime.now().isoformat()
        campaign_data["updated_at"] = datetime.now().isoformat()
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å UTC –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        if "created_utc" not in campaign_data:
            campaign_data["created_utc"] = datetime.now(timezone.utc).isoformat()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–º–ø–∞–Ω–∏—é –≤ –ø–∞–º—è—Ç—å
        self.campaigns[campaign_id] = campaign_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ JSON
        await self.save_campaigns()
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è: {campaign_id} - {campaign_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        return campaign_id
    
    async def update_campaign(self, campaign_id: str, campaign_data: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞–º–ø–∞–Ω–∏—é"""
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏: {campaign_id}")
        
        if campaign_id not in self.campaigns:
            logger.error(f"‚ùå –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {campaign_id}")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∫–∞–º–ø–∞–Ω–∏–∏
        campaign_data["id"] = campaign_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π ID
        campaign_data["updated_at"] = datetime.now().isoformat()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–ø–∞–Ω–∏—é –≤ –ø–∞–º—è—Ç–∏
        self.campaigns[campaign_id] = campaign_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ JSON
        await self.save_campaigns()
        
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–º–ø–∞–Ω–∏—è: {campaign_id}")
        
        return True
    
    async def delete_campaign(self, campaign_id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∫–∞–º–ø–∞–Ω–∏—é"""
        logger.debug(f"–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏: {campaign_id}")
        
        if campaign_id not in self.campaigns:
            logger.error(f"‚ùå –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {campaign_id}")
            return False
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–º–ø–∞–Ω–∏—é –∏–∑ –ø–∞–º—è—Ç–∏
        campaign_name = self.campaigns[campaign_id].get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        del self.campaigns[campaign_id]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ JSON
        await self.save_campaigns()
        
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∫–∞–º–ø–∞–Ω–∏—è: {campaign_id} - {campaign_name}")
        
        return True
    
    async def toggle_campaign_status(self, campaign_id: str) -> Optional[str]:
        """–ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω–∏–∏ (–∞–∫—Ç–∏–≤–Ω–∞/–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)"""
        logger.debug(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–º–ø–∞–Ω–∏–∏: {campaign_id}")
        
        if campaign_id not in self.campaigns:
            logger.error(f"‚ùå –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {campaign_id}")
            return None
        
        campaign = self.campaigns[campaign_id]
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        current_status = campaign.get("status", "draft")
        new_status = "paused" if current_status == "active" else "active"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        campaign["status"] = new_status
        campaign["updated_at"] = datetime.now().isoformat()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ JSON
        await self.save_campaigns()
        
        logger.info(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}: {current_status} ‚Üí {new_status}")
        
        return new_status
    
    async def _schedule_checker(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        logger.debug("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π")
        
        try:
            while self.running:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                now_utc = datetime.now(timezone.utc)
                logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π –≤ UTC: {now_utc.strftime('%Y-%m-%d %H:%M:%S')} (–õ–æ–∫–∞–ª—å–Ω–æ–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')})")
                
                # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
                for campaign_id, campaign in self.campaigns.items():
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
                    if campaign.get("status") != "active":
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    if await self._should_run_campaign(campaign, now_utc):
                        logger.info(f"üéØ –ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏: {campaign_id}")
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
                        task = asyncio.create_task(self._process_campaign(campaign))
                        self.tasks.add(task)
                        task.add_done_callback(self.tasks.discard)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                await asyncio.sleep(60)
                
        except asyncio.CancelledError:
            logger.info("‚èπÔ∏è –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∫–∞–º–ø–∞–Ω–∏–π: {e}")
    
    async def _should_run_campaign(self, campaign: Dict, now_utc: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–Ω–∞ –ª–∏ –∫–∞–º–ø–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (UTC)"""
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏: {campaign.get('id')}")
        
        try:
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç
            start_date_str = campaign.get("start_date")
            end_date_str = campaign.get("end_date")
            
            if not start_date_str or not end_date_str:
                return False
            
            try:
                start_date = datetime.fromisoformat(start_date_str).astimezone(timezone.utc).date()
                end_date = datetime.fromisoformat(end_date_str).astimezone(timezone.utc).date()
            except ValueError:
                start_date = datetime.fromisoformat(start_date_str).date()
                end_date = datetime.fromisoformat(end_date_str).date()
            
            current_date_utc = now_utc.date()
            
            if current_date_utc < start_date or current_date_utc > end_date:
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–∞
            repeat_enabled = campaign.get("repeat_enabled", False)
            if repeat_enabled:
                repeat_settings = campaign.get("repeat_settings", {})
                interval = repeat_settings.get("interval")
                post_time_str = campaign.get("post_time", "12:00")
                post_time_parts = post_time_str.split(":")
                post_time_hour = int(post_time_parts[0])
                post_time_minute = int(post_time_parts[1])
                last_run = self.next_run_times.get(campaign.get('id'))
                
                if interval == "minutely":
                    # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç
                    logger.debug(f"–ö–∞–º–ø–∞–Ω–∏—è {campaign.get('id')} ‚Äî –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É")
                    if last_run and (now_utc - last_run).total_seconds() < 60:
                        return False
                elif interval == "hourly":
                    # –ö–∞–∂–¥—ã–π —á–∞—Å –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –º–∏–Ω—É—Ç—É
                    logger.debug(f"–ö–∞–º–ø–∞–Ω–∏—è {campaign.get('id')} ‚Äî –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä: –∫–∞–∂–¥—ã–π —á–∞—Å –≤ {post_time_minute:02d} –º–∏–Ω—É—Ç—É")
                    if now_utc.minute != post_time_minute:
                        return False
                    if last_run and (now_utc - last_run).total_seconds() < 3600:
                        return False
                elif interval == "daily":
                    # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                    if now_utc.hour != post_time_hour or now_utc.minute != post_time_minute:
                        return False
                    if last_run and (now_utc - last_run).total_seconds() < 86400:
                        return False
                elif interval == "weekly":
                    # –í —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è
                    week_day = repeat_settings.get("weekDay")
                    if str(now_utc.isoweekday()) != str(week_day):
                        return False
                    if now_utc.hour != post_time_hour or now_utc.minute != post_time_minute:
                        return False
                    if last_run and (now_utc - last_run).total_seconds() < 604800:
                        return False
                elif interval == "monthly":
                    month_settings = repeat_settings.get("monthlySettings", {})
                    if month_settings.get("type") == "date":
                        # –í —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –≤—Ä–µ–º—è
                        if str(now_utc.day) != str(month_settings.get("date")):
                            return False
                        if now_utc.hour != post_time_hour or now_utc.minute != post_time_minute:
                            return False
                    else:
                        # –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –º–µ—Å—è—Ü–∞
                        week_num = month_settings.get("week")
                        week_day = month_settings.get("weekDay")
                        current_week = (now_utc.day - 1) // 7 + 1
                        if (str(current_week) != str(week_num) or str(now_utc.isoweekday()) != str(week_day)):
                            return False
                        if now_utc.hour != post_time_hour or now_utc.minute != post_time_minute:
                            return False
                # –ï—Å–ª–∏ –Ω–µ minutely/hourly/daily/weekly/monthly ‚Äî —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
            else:
                # –ï—Å–ª–∏ –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä –Ω–µ –≤–∫–ª—é—á—ë–Ω ‚Äî —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞: –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                post_time_str = campaign.get("post_time", "12:00")
                post_time_parts = post_time_str.split(":")
                post_time_hour = int(post_time_parts[0])
                post_time_minute = int(post_time_parts[1])
                if now_utc.hour != post_time_hour or now_utc.minute != post_time_minute:
                    return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            conditions = campaign.get("conditions", [])
            if conditions:
                should_publish = False
                
                for condition in conditions:
                    condition_type = condition.get("type")
                    
                    if condition_type == "time-range":
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                        time_start = datetime.strptime(condition["timeStart"], "%H:%M").time()
                        time_end = datetime.strptime(condition["timeEnd"], "%H:%M").time()
                        current_time = now_utc.time()
                        
                        if time_start <= current_time <= time_end:
                            should_publish = True
                            break
                            
                    elif condition_type == "weekdays":
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
                        weekdays = condition.get("weekdays", [])
                        if str(now_utc.isoweekday()) in map(str, weekdays):
                            should_publish = True
                            break
                            
                    elif condition_type == "month-days":
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
                        days = condition.get("days", [])
                        current_month = condition.get("month")
                        
                        if (str(now_utc.day) in map(str, days) and 
                            (not current_month or now_utc.month == int(current_month))):
                            should_publish = True
                            break
                            
                if not should_publish:
                    logger.debug(f"–ö–∞–º–ø–∞–Ω–∏—è {campaign.get('id')} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º")
                    return False

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            self.next_run_times[campaign.get('id')] = now_utc
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏: {e}")
            return False
    
    async def _process_campaign(self, campaign: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏"""
        campaign_id = campaign.get("id")
        campaign_name = campaign.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id} ({campaign_name}) –≤ UTC {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')}")
        
        try:
            chats = campaign.get("chats", [])
            if not chats:
                logger.warning(f"‚ö†Ô∏è –ö–∞–º–ø–∞–Ω–∏—è {campaign_id} –Ω–µ –∏–º–µ–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return
            
            message_text = campaign.get("message_text", "")
            if not message_text:
                logger.warning(f"‚ö†Ô∏è –ö–∞–º–ø–∞–Ω–∏—è {campaign_id} –∏–º–µ–µ—Ç –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            disable_preview = bool(campaign.get("disable_preview", False))
            disable_notification = bool(campaign.get("disable_notification", False))
            protect_content = bool(campaign.get("protect_content", False))
            pin_message = bool(campaign.get("pin_message", False))
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}:")
            logger.info(f"   üîó –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫: {disable_preview}")
            logger.info(f"   üîï –¢–∏—Ö–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {disable_notification}")
            logger.info(f"   üõ°Ô∏è –ó–∞—â–∏—â—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {protect_content}")
            logger.info(f"   üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {pin_message}")
            
            buttons = campaign.get("buttons", [])
            media_files = campaign.get("media_files", [])
            has_media = len(media_files) > 0
            
            logger.debug(f"–ö–∞–º–ø–∞–Ω–∏—è {campaign_id}: —á–∞—Ç–æ–≤={len(chats)}, –∫–Ω–æ–ø–æ–∫={len(buttons)}, –º–µ–¥–∏–∞={len(media_files)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫
            buttons = None
            if campaign.get("buttons"):
                try:
                    if isinstance(campaign["buttons"], list):
                        buttons = campaign["buttons"]
                    else:
                        buttons = json.loads(campaign["buttons"])
                
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫
                    if not isinstance(buttons, list):
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫: {buttons}")
                        buttons = None
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
                    buttons = None
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(f"–ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}: {buttons}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            for chat in chats:
                chat_id = chat.get("chat_id")
                thread_id = chat.get("thread_id")
                
                logger.info(f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —á–∞—Ç: {chat_id}, thread_id: {thread_id}")
                
                if not chat.get("is_active", True):
                    logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞: {chat_id}")
                    continue
                
                try:
                    message_sent = None
                    
                    if has_media:
                        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
                        media = []
                        for file_info in media_files:
                            file_path = os.path.join(self.config.UPLOADS_DIR, file_info.get("filename"))
                            if not os.path.exists(file_path):
                                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                                continue
                                
                            media.append({
                                "path": file_path,
                                "type": file_info.get("type", ""),
                                "caption": message_text if len(media) == 0 else None
                            })
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                        logger.info(f"üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –≤ —á–∞—Ç {chat_id} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: disable_notification={disable_notification}, protect_content={protect_content}")
                        
                        messages = await self.bot.send_media_group_with_buttons(
                            chat_id=chat_id,
                            thread_id=thread_id,
                            media=media,
                            buttons=buttons,
                            disable_notification=disable_notification,
                            protect_content=protect_content
                        )
                        
                        message_sent = messages[-1] if messages else None
                        
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                        logger.info(f"üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
                        logger.info(f"    disable_preview={disable_preview}, disable_notification={disable_notification}")
                        logger.info(f"    protect_content={protect_content}")
                        
                        message_sent = await self.bot.send_message(
                            chat_id=chat_id,
                            thread_id=thread_id,
                            text=message_text,
                            buttons=buttons,
                            disable_preview=disable_preview,
                            disable_notification=disable_notification,
                            protect_content=protect_content
                        )
                    
                    # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if message_sent and pin_message:
                        try:
                            logger.info(f"üìå –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_sent.message_id} –≤ —á–∞—Ç–µ {chat_id}")
                            
                            await self.bot.bot.pin_chat_message(
                                chat_id=chat_id,
                                message_id=message_sent.message_id,
                                disable_notification=disable_notification
                            )
                            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_sent.message_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
                            
                        except TelegramAPIError as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                            logger.error(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {e.error_code if hasattr(e, 'error_code') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}")
                            logger.error(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {e.message if hasattr(e, 'message') else str(e)}")
                        except Exception as e:
                            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
                except TelegramAPIError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —á–∞—Ç {chat_id}: {e}")
                    logger.error(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {e.error_code if hasattr(e, 'error_code') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}")
                    logger.error(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {e.message if hasattr(e, 'message') else str(e)}")
                    continue
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —á–∞—Ç {chat_id}: {e}")
                    continue

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
                chat["last_posted"] = datetime.now().isoformat()
                chat["post_count"] = chat.get("post_count", 0) + 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–º–ø–∞–Ω–∏–∏
            campaign["last_run"] = datetime.now(timezone.utc).isoformat()
            campaign["run_count"] = campaign.get("run_count", 0) + 1
            
            await self.save_campaigns()
            
            logger.info(f"üéâ –ö–∞–º–ø–∞–Ω–∏—è {campaign_id} ({campaign_name}) —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ UTC {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}: {e}")
    
    async def _prepare_media_group(self, media_files, caption=None):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        logger.debug(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –∏–∑ {len(media_files)} —Ñ–∞–π–ª–æ–≤")
        
        media_group = []
        
        for i, media_file in enumerate(media_files):
            file_path = os.path.join(self.config.UPLOADS_DIR, media_file.get("filename"))
            is_first = (i == 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                continue
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
            media_type = media_file.get("type", "")
            
            try:
                if media_type.startswith("image/"):
                    # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    media = InputMediaPhoto(
                        media=InputFile(file_path),
                        caption=caption if is_first else None
                    )
                elif media_type.startswith("video/"):
                    media = InputMediaVideo(
                        media=InputFile(file_path),
                        caption=caption if is_first else None
                    )
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {media_type}")
                    continue
                
                media_group.append(media)
                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –≤ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É: {file_path}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                continue
        
        logger.info(f"‚úÖ –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞: {len(media_group)} —Ñ–∞–π–ª–æ–≤")
        return media_group
    
    def add_campaign(self, campaign_data: Dict) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏
        campaign_id = str(uuid.uuid4())
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ —Å ID: {campaign_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º UTC
        campaign_data["id"] = campaign_id
        campaign_data["created_at"] = datetime.now().isoformat()
        campaign_data["updated_at"] = datetime.now().isoformat()
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å UTC –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        if "created_utc" not in campaign_data:
            campaign_data["created_utc"] = datetime.now(timezone.utc).isoformat()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–º–ø–∞–Ω–∏—é –≤ –ø–∞–º—è—Ç—å
        self.campaigns[campaign_id] = campaign_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ JSON (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        self._save_campaigns_sync()
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è: {campaign_id} - {campaign_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        return campaign_id
    
    def update_campaign(self, campaign_id: str, campaign_data: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞–º–ø–∞–Ω–∏—é (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏: {campaign_id}")
        
        if campaign_id not in self.campaigns:
            logger.error(f"‚ùå –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {campaign_id}")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∫–∞–º–ø–∞–Ω–∏–∏
        campaign_data["id"] = campaign_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π ID
        campaign_data["updated_at"] = datetime.now().isoformat()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–ø–∞–Ω–∏—é –≤ –ø–∞–º—è—Ç–∏
        self.campaigns[campaign_id] = campaign_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ JSON
        self._save_campaigns_sync()
        
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–º–ø–∞–Ω–∏—è: {campaign_id}")
        
        return True
    
    def delete_campaign(self, campaign_id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∫–∞–º–ø–∞–Ω–∏—é (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        logger.debug(f"–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏: {campaign_id}")
        
        if campaign_id not in self.campaigns:
            logger.error(f"‚ùå –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {campaign_id}")
            return False
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–º–ø–∞–Ω–∏—é –∏–∑ –ø–∞–º—è—Ç–∏
        campaign_name = self.campaigns[campaign_id].get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        del self.campaigns[campaign_id]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ JSON
        self._save_campaigns_sync()
        
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∫–∞–º–ø–∞–Ω–∏—è: {campaign_id} - {campaign_name}")
        
        return True
    
    def toggle_campaign_status(self, campaign_id: str) -> Optional[str]:
        """–ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω–∏–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        logger.debug(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–º–ø–∞–Ω–∏–∏: {campaign_id}")
        
        if campaign_id not in self.campaigns:
            logger.error(f"‚ùå –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {campaign_id}")
            return None
        
        campaign = self.campaigns[campaign_id]
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        current_status = campaign.get("status", "draft")
        new_status = "paused" if current_status == "active" else "active"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        campaign["status"] = new_status
        campaign["updated_at"] = datetime.now().isoformat()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ JSON
        self._save_campaigns_sync()
        
        logger.info(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}: {current_status} ‚Üí {new_status}")
        
        return new_status
    
    def _save_campaigns_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–π –≤ JSON —Ñ–∞–π–ª"""
        try:
            campaigns_list = list(self.campaigns.values())
            with open(self.config.CAMPAIGNS_FILE, 'w', encoding='utf-8') as f:
                json.dump({"campaigns": campaigns_list}, f, ensure_ascii=False, indent=2)
            logger.debug(f"–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(campaigns_list)} –∫–∞–º–ø–∞–Ω–∏–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–π: {e}")
