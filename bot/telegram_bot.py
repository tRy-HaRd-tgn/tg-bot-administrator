import logging
import asyncio
from typing import List, Dict, Any, Optional, Union
import json

from loguru import logger
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    FSInputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
    InputMediaVideo,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)

class TelegramBot:
    def __init__(self, config):
        logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramBot")
        self.config = config
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è aiogram 3.7+
        self.bot = Bot(
            token=config.BOT_TOKEN, 
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        self.dp = Dispatcher()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–æ—Å—Ç–µ, –ø–æ—Ä—Ç–µ –∏ ngrok
        self.host = "0.0.0.0"
        self.port = 8000
        self.ngrok_url = None
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self._register_handlers()
        logger.info("TelegramBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.debug("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        @self.dp.message(Command("start"))
        async def cmd_start(message: types.Message):
            user_id = message.from_user.id
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
            if user_id in self.config.ADMIN_IDS:
                logger.info(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞
                keyboard = ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")]],
                    resize_keyboard=True
                )
                await message.answer(
                    "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞!</b>\n\n"
                    "–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã.\n"
                    "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø–∞–Ω–µ–ª—å –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.",
                    reply_markup=keyboard
                )
            else:
                logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
                pass
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º F.text –≤–º–µ—Å—Ç–æ Text
        @self.dp.message(F.text == "üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        async def status_button_handler(message: types.Message):
            user_id = message.from_user.id
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
            if user_id in self.config.ADMIN_IDS:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –∞–¥–º–∏–Ω—É {user_id}")
                await self.send_status_message(user_id)
            else:
                logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
          # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.dp.message()
        async def echo_message(message: types.Message):
            user_id = message.from_user.id
            chat_type = message.chat.type
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text if message.text else '–±–µ–∑ —Ç–µ–∫—Å—Ç–∞'}")
            logger.debug(f"–¢–∏–ø —á–∞—Ç–∞: {chat_type}")
            
            # –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
            if chat_type == "private" and user_id in self.config.ADMIN_IDS:
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω—É {user_id} –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
                keyboard = ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")]],
                    resize_keyboard=True
                )
                await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.", reply_markup=keyboard)
            else:
                # –í –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö –±–æ—Ç –º–æ–ª—á–∏—Ç
                if chat_type != "private":
                    logger.debug(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª {message.chat.id}, –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                else:
                    logger.warning(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        logger.debug("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_info = await self.bot.get_me()
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ @{bot_info.username} (ID: {bot_info.id})")
            
            # –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            await self._start_polling()
            logger.info("–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞: {e}")
            raise
    
    async def _start_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.debug("–ó–∞–ø—É—Å–∫ polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
            loop = asyncio.get_event_loop()
            task = loop.create_task(self.dp.start_polling(self.bot))
            logger.info("Polling –∑–∞–ø—É—â–µ–Ω")
            return task
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        logger.debug("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
        try:
            await self.bot.session.close()
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
    
    async def notify_admin_startup(self, host, port, ngrok_url=None):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã"""
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø—É—Å–∫–µ {len(self.config.ADMIN_IDS)} –∞–¥–º–∏–Ω–∞–º")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.host = host
        self.port = port
        self.ngrok_url = ngrok_url
        
        for admin_id in self.config.ADMIN_IDS:
            try:
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                message = self._get_status_message()
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞
                keyboard = ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")]],
                    resize_keyboard=True
                )
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏
                inline_buttons = []
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                local_url = f"http://{self.host}:{self.port}"
                inline_buttons.append([InlineKeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", url=local_url)])
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if self.ngrok_url:
                    inline_buttons.append([InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –≤–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø", url=self.ngrok_url)])
                
                # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
                inline_markup = InlineKeyboardMarkup(inline_keyboard=inline_buttons)
                
                await self.bot.send_message(
                    admin_id,
                    message,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
                await self.bot.send_message(
                    admin_id,
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:",
                    reply_markup=inline_markup
                )
                
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
            except TelegramAPIError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    async def send_status_message(self, user_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message = self._get_status_message()
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏
            buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            local_url = f"http://{self.host}:{self.port}"
            buttons.append([InlineKeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", url=local_url)])
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if self.ngrok_url:
                buttons.append([InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –≤–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø", url=self.ngrok_url)])
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
            await self.bot.send_message(
                user_id,
                message,
                parse_mode="HTML",
                reply_markup=markup
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    def _get_status_message(self):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Å–∏—Å—Ç–µ–º—ã"""
        message = f"üöÄ <b>TG AutoPosting –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        message += f"üåê –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ–±-–ø–∞–Ω–µ–ª—å: <code>http://{self.host}:{self.port}</code>\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º Ngrok —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if self.ngrok_url:
            message += f"üîó –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø: <code>{self.ngrok_url}</code>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤ UTC —Ñ–æ—Ä–º–∞—Ç–µ
            from utils.time_helper import get_future_utc_time_str
            next_restart_str = get_future_utc_time_str(hours=self.config.NGROK_RESTART_INTERVAL)
            
            message += f"‚è±Ô∏è –°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ <b>{next_restart_str}</b>\n"
            message += f"‚åõ –û—Å—Ç–∞–ª–æ—Å—å: {self.config.NGROK_RESTART_INTERVAL} —á. 0 –º–∏–Ω.\n"
        
        message += f"üë§ –õ–æ–≥–∏–Ω: <code>{self.config.ADMIN_USERNAME}</code>\n"
        message += f"üîë –ü–∞—Ä–æ–ª—å: <code>{self.config.ADMIN_PASSWORD}</code>\n\n"
        message += f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
        
        return message
    
    async def send_message(self, chat_id: Union[int, str], text: str, 
                          thread_id: Optional[int] = None,
                          buttons: Optional[List[Dict]] = None,
                          disable_preview: bool = False,
                          disable_notification: bool = False,
                          protect_content: bool = False,
                          **kwargs) -> Optional[types.Message]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç"""
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}, thread_id: {thread_id}")
        logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: disable_preview={disable_preview}, disable_notification={disable_notification}, protect_content={protect_content}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
            reply_markup = None
            if buttons:
                logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å {len(buttons)} –∫–Ω–æ–ø–∫–∞–º–∏")
                keyboard_buttons = []
                for button in buttons:
                    keyboard_buttons.append([
                        types.InlineKeyboardButton(
                            text=button.get("text", ""), 
                            url=button.get("url", "")
                        )
                    ])
                reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            message = await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                message_thread_id=thread_id,
                reply_markup=reply_markup,
                disable_web_page_preview=disable_preview,  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–æ–∫
                disable_notification=disable_notification,  # –¢–∏—Ö–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                protect_content=protect_content,           # –ó–∞—â–∏—â—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                parse_mode="HTML",  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
                **kwargs
            )
            
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}, ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}")
            logger.info(f"   –ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: preview={not disable_preview}, notification={not disable_notification}, protected={protect_content}")
            return message
            
        except TelegramAPIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
            logger.error(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {e.error_code if hasattr(e, 'error_code') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
            return None
    
    async def send_media_group(self, chat_id: Union[int, str], media: List[Any], 
                              thread_id: Optional[int] = None,
                              disable_notification: bool = False,
                              protect_content: bool = False) -> Optional[List[types.Message]]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç"""
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –≤ —á–∞—Ç {chat_id}, —Ñ–∞–π–ª–æ–≤: {len(media)}")
        
        try:
            messages = await self.bot.send_media_group(
                chat_id=chat_id,
                media=media,
                message_thread_id=thread_id,
                disable_notification=disable_notification,
                protect_content=protect_content
            )
            
            logger.info(f"‚úÖ –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id}, —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            return messages
        except TelegramAPIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞ –≤ —á–∞—Ç {chat_id}: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞ –≤ —á–∞—Ç {chat_id}: {e}")
            return None
    
    async def send_media_group_with_buttons(
        self,
        chat_id: Union[int, str],
        media: List[Dict],
        buttons: Optional[List[Dict]] = None,
        thread_id: Optional[int] = None,
        disable_notification: bool = False,
        protect_content: bool = False
    ) -> Optional[List[types.Message]]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –≤ —á–∞—Ç {chat_id}")
        logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: disable_notification={disable_notification}, protect_content={protect_content}")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É
            media_group = []
            
            for item in media:
                file_path = item.get("path")
                file_type = item.get("type")
                caption = item.get("caption", "")
                
                if not file_path:
                    continue
                    
                file = FSInputFile(file_path)
                
                if file_type.startswith("image/"):
                    media_item = InputMediaPhoto(media=file, caption=caption, parse_mode="HTML")
                elif file_type.startswith("video/") or file_type.endswith("/gif"):
                    media_item = InputMediaVideo(media=file, caption=caption, parse_mode="HTML")
                else:
                    continue
                    
                media_group.append(media_item)

            if not media_group:
                logger.warning("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return None

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            logger.info(f"üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(media_group)} –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: notification={not disable_notification}, protected={protect_content}")
            
            messages = await self.bot.send_media_group(
                chat_id=chat_id,
                media=media_group,
                message_thread_id=thread_id,
                disable_notification=disable_notification,  # –¢–∏—Ö–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                protect_content=protect_content             # –ó–∞—â–∏—â—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
            if buttons and messages:
                keyboard = []
                for button in buttons:
                    keyboard.append([
                        InlineKeyboardButton(
                            text=button.get("text", ""),
                            url=button.get("url", "")
                        )
                    ])
                    
                markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
                
                logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã")
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã, –¥–æ–±–∞–≤–ª—è—è –∫–Ω–æ–ø–∫–∏
                try:
                    await self.bot.edit_message_reply_markup(
                        chat_id=chat_id,
                        message_id=messages[0].message_id,
                        reply_markup=markup
                    )
                    logger.debug("–ö–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—é")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∫ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—é: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∫ –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
                    
                    button_message = await self.bot.send_message(
                        chat_id=chat_id,
                        text="‚ö° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
                        reply_markup=markup,
                        message_thread_id=thread_id,
                        disable_notification=disable_notification,
                        protect_content=protect_content
                    )
                    
                    if button_message:
                        messages.append(button_message)
            
            logger.info(f"‚úÖ –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id}, —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            return messages
            
        except TelegramAPIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã –≤ —á–∞—Ç {chat_id}: {e}")
            logger.error(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {e.error_code if hasattr(e, 'error_code') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã –≤ —á–∞—Ç {chat_id}: {e}")
            return None
    
    async def delete_message(self, chat_id: Union[int, str], message_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞"""
        logger.debug(f"–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –∏–∑ —á–∞—Ç–∞ {chat_id}")
        
        try:
            await self.bot.delete_message(chat_id=chat_id, message_id=message_id)
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞ {chat_id}")
            return True
        except TelegramAPIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –∏–∑ —á–∞—Ç–∞ {chat_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –∏–∑ —á–∞—Ç–∞ {chat_id}: {e}")
            return False
    
    async def get_chat_info(self, chat_id: Union[int, str]) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ"""
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_id}")
        
        try:
            chat = await self.bot.get_chat(chat_id=chat_id)
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            chat_member = await self.bot.get_chat_member(chat_id=chat_id, user_id=self.bot.id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —á–∞—Ç–µ
            chat_info = {
                "id": str(chat.id),
                "chat_id": chat.id,
                "type": chat.type.value if hasattr(chat.type, 'value') else str(chat.type),
                "title": chat.title,
                "username": chat.username,
                "description": chat.description,
                "member_count": None,  # –í aiogram 3.x –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                "is_forum": getattr(chat, 'is_forum', False),
                "avatar_url": None,  # API –Ω–µ –¥–∞–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–≤–∞—Ç–∞—Ä–∫–µ
                "bot_status": chat_member.status.value if hasattr(chat_member.status, 'value') else str(chat_member.status),
                "can_send_messages": getattr(chat_member, 'can_send_messages', False),
                "can_edit_messages": getattr(chat_member, 'can_edit_messages', False),
                "can_delete_messages": getattr(chat_member, 'can_delete_messages', False),
                "can_pin_messages": getattr(chat_member, 'can_pin_messages', False),
                "can_manage_topics": getattr(chat_member, "can_manage_topics", False)
            }
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ä—É–º, –ø–æ–ª—É—á–∞–µ–º —Ç–µ–º—ã
            if chat_info["is_forum"]:
                logger.debug(f"–ß–∞—Ç {chat_id} —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º, –ø–æ–ª—É—á–∞–µ–º —Ç–µ–º—ã")
                chat_info["forum_topics"] = await self.get_forum_topics(chat_id)
            
            logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ {chat_id} –ø–æ–ª—É—á–µ–Ω–∞: {chat_info['title']}")
            return chat_info
        except TelegramAPIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_id}: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_id}: {e}")
            return None
    
    async def get_forum_topics(self, chat_id: Union[int, str]) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Ñ–æ—Ä—É–º–∞"""
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º —Ñ–æ—Ä—É–º–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        
        try:
            # –í aiogram 3.x –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Ç–∞–∫ –∫–∞–∫ API –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
            logger.warning("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º —Ñ–æ—Ä—É–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ aiogram 3.x")
            return []
        except TelegramAPIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º —Ñ–æ—Ä—É–º–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
            return []
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º —Ñ–æ—Ä—É–º–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
            return []
    
    async def send_message_to_chat(self, chat_id, message_text, media_files=None, buttons=None, disable_web_page_preview=False, disable_notification=False, protect_content=False, thread_id=None, parse_mode="HTML"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            reply_markup = None
            if buttons and isinstance(buttons, list) and len(buttons) > 0:
                logger.debug(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫: {buttons}")
                inline_keyboard = []
                for button in buttons:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
                    if isinstance(button, dict) and 'text' in button and 'url' in button:
                        inline_keyboard.append([{"text": button["text"], "url": button["url"]}])
                
                if inline_keyboard:
                    reply_markup = {"inline_keyboard": inline_keyboard}
                    logger.debug(f"–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {reply_markup}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
            if media_files and len(media_files) > 0:
                # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
                pass
            else:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
                message = await self.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    parse_mode=parse_mode,
                    disable_web_page_preview=disable_web_page_preview,
                    disable_notification=disable_notification,
                    protect_content=protect_content,
                    message_thread_id=thread_id,
                    reply_markup=reply_markup  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                )

            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        except TelegramAPIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
